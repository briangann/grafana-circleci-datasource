version: 2.1

parameters:
  ssh-fingerprint:
    type: string
    default: ${GITHUB_SSH_FINGERPRINT}

aliases:
  # Workflow filters
  - &filter-only-master
    branches:
      only: master
  - &filter-only-release
    branches:
      only: /^v[1-9]*[0-9]+\.[1-9]*[0-9]+\.x$/

workflows:
  plugin_workflow:
    jobs:
      - yarn_install
      - build_docs:
          requires:
            - yarn_install
      - build_frontend:
          requires:
            - yarn_install
      - code_coverage_frontend:
          requires:
            - build_frontend
      - build_backend:
          requires:
            - yarn_install
      - code_coverage_backend:
          requires:
            - build_backend
      - upload_coverage:
          requires:
            - code_coverage_frontend
            - code_coverage_backend
      - package:
          requires:
          - build_frontend
          - build_backend
          - build_docs
      - approve_release:
          type: approval
          requires:
          - package
          - upload_coverage
          filters: *filter-only-release
      - publish_github_release:
          requires:
            - approve_release
          filters: *filter-only-release

executors:
  default_exec: # declares a reusable executor
    docker:
      - image: srclosson/grafana-plugin-ci-alpine:latest
  e2e_exec:
    docker:
      - image: srclosson/grafana-plugin-ci-e2e:latest

jobs:
  yarn_install:
    executor: default_exec
    steps:
      - checkout
      - restore_cache:
          name: restore node_modules
          keys:
          - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies
          command: |
            mkdir ci
            [ -f ~/project/node_modules/.bin/grafana-toolkit ] || yarn install --frozen-lockfile
      - save_cache:
          name: save node_modules
          paths:
            - ~/project/node_modules
          key: build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}

  build_docs:
    executor: default_exec
    steps:
      - checkout
      - restore_cache:
          name: restore node_modules
          keys:
          - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: Build docs
          command: |
            ./node_modules/.bin/grafana-toolkit plugin:ci-docs
            [ -d "dist" ] || circleci-agent step halt
      - persist_to_workspace:
          root: .
          paths:
            - dist

  build_frontend:
    executor: default_exec
    steps:
      - checkout
      - restore_cache:
          name: restore node_modules
          keys:
          - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: Build and test frontend
          command: |
            ./node_modules/.bin/grafana-toolkit plugin:ci-build
            ./node_modules/.bin/grafana-toolkit plugin:ci-build --finish
      - persist_to_workspace:
          root: .
          paths:
            - ci

  build_backend:
    executor: e2e_exec
    steps:
      - checkout
      - restore_cache:
          name: restore node_modules
          keys:
          - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: Build backend
          command: mage -v buildAll
      - run:
          name: Test backend
          command: |
            mage -v lint
            mage -v coverage
      - run:
          name: Move results to ci folder
          command: |
            ./node_modules/.bin/grafana-toolkit plugin:ci-build --finish
      - persist_to_workspace:
          root: .
          paths:
            - ci/jobs/build_backend

  code_coverage_frontend:
    executor: default_exec
    steps:
    - checkout
    - attach_workspace:
        at: .
    - restore_cache:
        name: restore node_modules
        keys:
          - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
    - run:
        name: Run coverage report
        command: |
          /usr/local/bin/cc-test-reporter format-coverage -t lcov -o out/codeclimate.frontend.json ci/jobs/build_frontend/coverage/lcov.info
    - run:
        name: Install jest and jest-junit
        command: yarn global add jest jest-junit
    - run:
        name: Run tests with JUnit as reporter
        command: jest --passWithNoTests --ci --runInBand --reporters=default --reporters=jest-junit
        environment:
          JEST_JUNIT_OUTPUT_DIR: "test-results/jest/results.xml"
    - persist_to_workspace:
        root: .
        paths:
        - out
        - ci/jobs/code_coverage_frontend
    - store_test_results:
        path: test-results

  code_coverage_backend:
    executor: e2e_exec
    working_directory: /go/src/github.com/briangann/grafana-circleci-datasource
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run coverage report
          command: |
            export GOPATH=/go
            mage -v coverage
            ls -alR coverage
            /usr/local/bin/cc-test-reporter format-coverage -t gocov -o out/codeclimate.backend.json coverage/backend.out
      - persist_to_workspace:
          root: .
          paths:
            - out
            - ci/jobs/code_coverage_backend
      - store_artifacts:
          path: out
      - store_artifacts:
          path: ci/jobs/code_coverage_backend
      - store_test_results:
          path: out

  upload_coverage:
    executor: default_exec
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Upload coverage results to Code Climate
          command: |
            /usr/local/bin/cc-test-reporter sum-coverage out/codeclimate.*.json -d -p 2 -o out/codeclimate.total.json
            /usr/local/bin/cc-test-reporter upload-coverage -i out/codeclimate.total.json

  package:
    executor: e2e_exec
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          name: restore node_modules
          keys:
            - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: Package Distribution (for signing/etc)
          command: |
            #
            # ci-package will create the zip file
            #
            ./node_modules/.bin/grafana-toolkit plugin:ci-package
            #
            #
            PLUGIN_NAME=`cat ci/dist/plugin.json|jq '.id'| sed s/\"//g`
            VERSION=`cat ci/dist/plugin.json|jq '.info.version'| sed s/\"//g`
            echo "Plugin Name: ${PLUGIN_NAME}"
            echo "Plugin Version: ${VERSION}"
            #
            # move all files into ANY subdir
            #
            mkdir -p ci/packages/any
            cp -p ci/packages/info.json ci/packages/any/info.json
            cp -p ci/packages/info.json ci/packages/any/info-any.json
            mv ci/packages/${PLUGIN_NAME}* ci/packages/any/
      - persist_to_workspace:
          root: .
          paths:
            - ci/dist
            - ci/jobs/package
            - ci/packages
      - store_artifacts:
          path: ci/packages

  publish_github_release:
    executor: default_exec
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
          - << pipeline.parameters.ssh-fingerprint >>
      - attach_workspace:
          at: .
      - restore_cache:
          name: restore node_modules
          keys:
          - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: "Publish Release on GitHub"
          command: |
            ./node_modules/.bin/grafana-toolkit plugin:github-publish
